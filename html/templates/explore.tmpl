{{define "explore"}} {{template "head" . }}
<div class="pane" id="explore">
    <script src="public/js/d3.v4.min.js"></script>
    <script src="public/js/kalmanjs.js"></script>

    <table id="overview">
    </table>
    <div class="button" id="play">Pause data collection</div>
    <svg></svg>
    
    <table id="this">
        <tr>
            <th>Client</th>
            <th>Mac</th>
            <th>Ip</th>
            <th>Zone</th>
            <th>Signal</th>
            <th>Distance</th>
        </tr>
        <tr>
                <td id="cname"></td>
                <td id="cmac"></td>
                <td id="cip"></td>
                <td id="czone"></td>
                <td id="csignal"></td>
                <td id="cdistance"></td>
            </tr>
    </table>
    <script>
        goproxi.addEventListener("ready", function () {
            console.log("ready")
            createTable()
            buildGraph()
            updateGraph()
        })

        goproxi.addEventListener("joined left joinedlocation leftlocation", function (e) {
            console.log(e)
            createTable()
        })

        goproxi.addEventListener("updated", function (e) {
            if (!pause) {
                updateGraph()
            }

            updateHereInformation()
        })

        var pane = document.querySelector(".pane#explore")
        var table = pane.querySelector("table#overview")
        var svg = pane.querySelector("svg")
        var playBtn = pane.querySelector("#play")
        var paneRect = pane.getBoundingClientRect();
        var pause = false;

        function pauseorplay() {
            if (pause) {
                playBtn.innerHTML = "Pause data collection"
                pause = false
            } else {
                playBtn.innerHTML = "Start data collection"
                pause = true
            }
        }

        playBtn.addEventListener("click", pauseorplay)
        var margin = {
            top: 50,
            right: 100,
            bottom: 30,
            left: 40
        }
        var width = paneRect.width - margin.left - margin.right - 50
        var height = 400 - margin.top - margin.bottom

        var x = d3.scaleLinear().range([0, width]);
        var y = d3.scaleLinear().range([height, 0]);

        x.domain([0, 100]);
        y.domain([0, -100]);

        function createTable() {
            var locations = goproxi.locations
            table.innerHTML = "" // clean if we do periodic update
            //consider a) subscribing to each location || periodic update

            maxDevices = 0;
            for (var i = 0, n = locations.length; i < n; i++) {
                if (locations[i].devices.length > maxDevices) {
                    maxDevices = locations[i].devices.length
                }
            }

            var r = table.insertRow()
            r.innerHTML = `<th>Location</th><th colspan="${maxDevices}">Devices</th>`

            for (var i = 0, n = locations.length; i < n; i++) {
                var r = table.insertRow()
                var th = r.insertCell(0)
                th.innerHTML = `<b>${locations[i].name}</b>`
                for (var j = 1, k = maxDevices + 1; j < k; j++) {
                    var c = r.insertCell(j)

                    c.addEventListener("click", cellClicked)

                    if (locations[i].devices.length >= j) {
                        c.innerHTML = locations[i].devices[j - 1].name
                        c.dataset.mac = locations[i].devices[j - 1].mac
                        c.dataset.location = locations[i].mac
                    }
                }
            }
        }

        function cellClicked(evt) {
            var t = evt.target
            var o = table.querySelector(".selected")
            if (o) {
                o.classList.toggle("selected")
            }
            t.classList.toggle("selected")
        }

        function buildGraph() {

            var svg = d3.select("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            svg.append("g")
                .attr("id", "lines")

            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            svg.append("g")
                .call(d3.axisLeft(y));
        }

        function updateGraph() {
            var el = table.querySelector("td.selected")
            if (el) {
                var mac = el.dataset.mac
                var l_mac = el.dataset.location
                var device, signals

                for (var i = 0, n = goproxi.devices.length; i < n; i++) {
                    var d = goproxi.devices[i]
                    if (d.mac === mac) {
                        device = d
                        for (var k = 0, j = device.locations.length; k < j; k++) {
                            loc = device.locations[k]
                            if (loc.mac === l_mac) {
                                signals = loc.signals
                                break;
                            }
                        }
                        break
                    }
                }

                kalmanSignals = []
                kalmanFilter = new KalmanFilter(0.05, 8)
                for (var i = 0, n = signals.length; i < n; i++) {
                    var signal = signals[i]
                    var ksignal = kalmanFilter.filter(signal)
                    kalmanSignals.push(ksignal)
                }

                // define the line
                var valueline = d3.line()
                    .x(function (i, d) {

                        return x(d);
                    })
                    .y(function (i, d) {

                        return y(i);
                    });

                //signals and then kalman filter signals
                d3.select("g#lines").selectAll("*").remove();
                d3.select("g#lines")
                    .append("path")
                    .data([signals])
                    .attr("fill", "none")
                    .attr("stroke-opacity", 0.5)
                    .attr("stroke", "steelblue")
                    .attr("stroke-width", "2px")
                    .attr("d", valueline)

                d3.select("g#lines")
                    .append("path")
                    .data([kalmanSignals])
                    .attr("fill", "none")
                    .attr("stroke", "green")
                    .attr("stroke-opacity", 0.5)
                    .attr("stroke-width", "2px")
                    .attr("d", valueline)
            }
        }


        var ctable = document.querySelector("table#this")
        var cname = ctable.querySelector("#cname")
        var cmac = ctable.querySelector("#cmac")
        var cip = ctable.querySelector("#cip")
        var czone = ctable.querySelector("#czone")
        var csignal = ctable.querySelector("#csignal")
        var cdistance = ctable.querySelector("#cdistance")

        function updateHereInformation() {
            var h = goproxi.here.location.mac
            var t = goproxi.this
            
            var signal, zone;
            for (var i = 0, n = t.locations.length; i < n; i++) {
                if (t.locations[i].mac === h) {
                    signal = t.locations[i].signal
                    zone = t.locations[i].zone
                    break
                }
            }

            cname.innerHTML = t.name
            cmac.innerHTML = t.mac
            cip.innerHTML = t.ip
            czone.innerHTML = zone
            csignal.innerHTML = signal
            cdistance.innerHTML = getRange(goproxi.here.calibration.PersonalZone, signal)
        }

        
            
        function getRange(txCalibratedPower, rssi) {
            var ratio_db = txCalibratedPower - rssi;
            var ratio_linear = Math.pow(10, ratio_db / 10);
            
            var r = Math.sqrt(ratio_linear);
            return r.toFixed(2);
        }
    </script>

</div>

{{template "foot"}} {{end}}